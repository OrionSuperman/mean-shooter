<html>
<head>
	<title>Javascript Box - OOP demo</title>
	<style>
		#svg {
			width: 800px;
			height: 800px;
			border: 1px solid black;
			display: inline-block;
		}
		*{
			border: 0px;
			margin: 0px;
			padding: 0px;
		}
		#scoreboard {
			display: inline-block;
			width: 200px;
			height: 500px;
			background-color: #eeeeee;
			vertical-align: top;
		}
	</style>
	<script src="http://ajax.googleapis.com/ajax/libs/jquery/1.11.1/jquery.min.js"></script>
  <script type ="text/javascript" src="/socket.io/socket.io.js"></script>
</head>
<body>

	<svg id="svg" xmlns="http://www.w3.org/2000/svg"></svg>
	<div id="scoreboard"></div>
	<script>
	var socket = io.connect();


	function Circle(cx, cy, html_id, radius)
	{
		var html_id = html_id;
		if (!cx){
			cx = -5;
			cy = -5;
		}
		this.info = { cx: cx,  cy: cy };
		this.initialize = function(){

			//create a circle
			var circle = makeSVG('circle',
				{ 	cx: this.info.cx,
				  	cy: this.info.cy,
				  	r:  radius,
						id: html_id,
						onclick: "playground.shoot()",
				  	style: "fill: black",

				});
				if(html_id == 'target'){

				} else {
					circle['onclick'] = '';
					circle['style'] = "fill: red";
				}

			document.getElementById('svg').appendChild(circle);
		}

		//creates the SVG element and returns it
		var makeSVG = function(tag, attrs) {
	        var el= document.createElementNS('http://www.w3.org/2000/svg', tag);
	        for (var k in attrs)
	        {
	            el.setAttribute(k, attrs[k]);
	        }
	        return el;
	    }
	    this.initialize();
	}


	function PlayGround()
	{
		var counter = 0;  //counts the number of circles created
		var circles = [ ]; //array that will hold all the circles created in the app
		//a loop that updates the circle's position on the screen
		this.loop = function(){
			for(circle in circles)
			{
				circles[circle].update(1);
			}
		}
		this.createNewCircle = function(x,y, id, color){
			var new_circle = new Circle(x,y,id, color);
			circles.push(new_circle);
			d = new Date();
			appear = d.getTime();

		}
		var d;
		var appear;

		this.shoot = function(){
			// alert("this.shoot function");
			var d = new Date();
			var n = d.getTime();
			var delay = n - appear;

			socket.emit("user_shot", {delay: delay})
			x = document.getElementById('target');
			if (x){
				x.parentNode.removeChild(x);
			}
		}
	}

	socket.on('game_status', function(data){

		for (each in data){
			x = document.getElementById(data[each]['id']);
			if (x && data[each]['mx']){
				x.setAttribute("cx", data[each]['mx']);
				x.setAttribute("cy", data[each]['my']);
			}
			else {
				playground.createNewCircle(data[each]['mx'], data[each]['my'], each, 5);
			}
		}
	})

	socket.on('score_update', function(data){
		$('#scoreboard').html('');
		var count = 0;
		for (each in data){
			var avg = Math.floor(data[each]['totalMS'] / data[each]['shots']);
			var socid = '/#' + socket.id
			console.log("SOCKET ID: " + socket.id + " VS " + data[each]['id']);

			if(data[each]['id'] == socid){
				$('#scoreboard').append("<p>YOUR AVERAGE: "+ avg + " ms.");
			} else {
				$('#scoreboard').append("<p>User " + count++ + " : "+ avg + " ms.");
			}
		}
	})

	socket.on('new_target', function(data){
		console.log('NEW TARGET MADE')
		x = document.getElementById('target');
		if (x){
			x.parentNode.removeChild(x);
		}
		playground.createNewCircle(data.x, data.y, 'target', 20);
	})

	socket.on('quitter', function(data){
		console.log(data);
		console.log("Yea");
		x = document.getElementById(data['id']);
		x.parentNode.removeChild(x);
	})

	var cursorX;
	var cursorY;
	document.onmousemove = function(e){
	    cursorX = e.pageX;
	    cursorY = e.pageY - 6;
	}
	setInterval("checkCursor()", 10);
	function checkCursor(){
		var position = {x: cursorX, y: cursorY}
		socket.emit("mouse_position", position)
	}

	var playground = new PlayGround();


	// document.onclick = function(e) {
	// 	playground.createNewCircle(e.x,e.y);
	// }

	</script>

</body>
</html>
